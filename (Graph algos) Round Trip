#include <bits/stdc++.h>
using namespace std;

#define int long long
const long long mod = 1e9 + 7;
vector<vector<int> > adjList;
vector<bool> vis;
vector<int> parents;
bool found = false;
int start = -1;

void dfs(int node, int par){
    if(found){
        return;
    }
    if(vis[node]){
        start=node;
        found=true;
        return;
    }
    vis[node]=true;
    
    for(int neighbor: adjList[node]){
        if(neighbor != par){
            parents[neighbor]=node;
            dfs(neighbor, node);
        }
        if(found){
            return;
        }
    }
}

int32_t main() {
    ios::sync_with_stdio(false);
    cin.tie(NULL);
    int n, m;
    cin>>n>>m;
    adjList.resize(n+1);
    vis.resize(n+1, false);
    parents.resize(n+1, 0);

    for(int i=0; i<m; i++){
        int x, y;
        cin>>x>>y;
        adjList[x].push_back(y);
        adjList[y].push_back(x);
    }
    
    for(int i=1; i<=n; i++){
        if(!vis[i]){
            dfs(i, parents[i]);
        }
        if(found){
            break;
        }
    }
    if(!found){
        cout<<"IMPOSSIBLE"<<endl;
        return 0;
    }
    vector<int> ans;
    int curr=start;
    ans.push_back(curr);
    while(true){
        if((((int) ans.size())>1) && ans[0]==curr){
            break;
        }
        curr=parents[curr];
        ans.push_back(curr);
    }
    reverse(ans.begin(), ans.end());
    cout<<(int) ans.size()<<endl;
    for(int i=0; i<(int) ans.size(); i++){
        cout<<ans[i]<<" ";
    }



    return 0;
}
