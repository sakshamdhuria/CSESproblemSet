#include <bits/stdc++.h>
using namespace std;
 
 
 #define int long long 
const long long  mod =1e9+7;

vector<vector<char> > parents;
//vector<vector<char> > lab;
vector<vector<bool> > vis;

void bfs(pair<int, int> node, int n, int m, pair<int, int> bNode){
    
    queue<pair<int, int> > q;
    parents[node.first][node.second]='P';
    vis[node.first][node.second]=true;
    q.push(node);

    pair<int, int> curr = q.front();
    if(curr.first-1>0 && !vis[curr.first-1][curr.second]){
        q.push(make_pair(curr.first-1, curr.second));
        parents[curr.first-1][curr.second]='U';
    }
    if(curr.second-1>0 && !vis[curr.first][curr.second-1]){
        q.push(make_pair(curr.first, curr.second-1));
        parents[curr.first][curr.second-1]='L';
    }
    if(curr.first+1<=n && !vis[curr.first+1][curr.second]){
        q.push(make_pair(curr.first+1, curr.second));
        parents[curr.first+1][curr.second]='D';
    }
    if(curr.second+1<=m && !vis[curr.first][curr.second+1]){
        q.push(make_pair(curr.first, curr.second+1));
        parents[curr.first][curr.second+1]='R';
    }

    while(!q.empty()){
        curr = q.front();
        q.pop();
        if(!vis[curr.first][curr.second] && !vis[bNode.first][bNode.second]){
            vis[curr.first][curr.second]=true;
            if(curr.first-1>0 && !vis[curr.first-1][curr.second]){
                q.push(make_pair(curr.first-1, curr.second));
                parents[curr.first-1][curr.second]='U';
            }
            if(curr.second-1>0 && !vis[curr.first][curr.second-1]){
                q.push(make_pair(curr.first, curr.second-1));
                parents[curr.first][curr.second-1]='L';
            }
            if(curr.first+1<=n && !vis[curr.first+1][curr.second]){
                q.push(make_pair(curr.first+1, curr.second));
                parents[curr.first+1][curr.second]='D';
            }
            if(curr.second+1<=m && !vis[curr.first][curr.second+1]){
                q.push(make_pair(curr.first, curr.second+1));
                parents[curr.first][curr.second+1]='R';
            }
            //cout<<curr.first<<" "<<curr.second<<" "<<parents[curr.first][curr.second]<<endl;
        }
        
    }
}
int32_t main() {
    ios::sync_with_stdio(false);
    cin.tie(NULL);
    int n, m; 
    cin>>n >> m;
    parents.resize(n+1, vector<char> (m+1));
    vis.resize(n+1, vector<bool> (m+1, false));
    pair<int, int> aCoord, bCoord;
    for(int i=1; i<=n; i++){
        for(int j=1; j<=m; j++){
            char c;
            cin>>c;
            if(c=='#'){
                vis[i][j]=true;
            }
            if(c=='A'){
                aCoord=make_pair(i, j);
            }
            if(c=='B'){
                bCoord=make_pair(i, j);
                
            }

        }
    }
    bfs(aCoord, n, m, bCoord);
    if(!vis[bCoord.first][bCoord.second]){
        cout<<"NO";
    }else{
        vector<char> ans;
        cout<<"YES "<<endl;
        int fcord=bCoord.first, scord=bCoord.second;
        while(fcord != aCoord.first || scord != aCoord.second){
            ans.push_back(parents[fcord][scord]);
            //cout<<fcord<<" "<<scord<<endl;
            if(parents[fcord][scord]=='U'){
                fcord++;
            }
            else if(parents[fcord][scord]=='D'){
                fcord--;
            }
            else if(parents[fcord][scord]=='L'){
                scord++;
            }
            else if(parents[fcord][scord]=='R'){
                scord--;
            }

        }
        //cout<<fcord<<" "<<scord<<endl;
        int ansSize=(int) ans.size();
        cout<<ansSize<<endl;
        for(int i=ansSize-1; i>=0;i--){
            cout<<ans[i];
        }
        //cout<<endl<<parents[aCoord.first][aCoord.second-1]<<endl;
        
    }
    



    return 0;
}
