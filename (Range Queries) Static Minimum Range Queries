#include <bits/stdc++.h>
using namespace std;
 
#define int long long 
const long long  mod =1e9+7;
vector<int> vec;
vector<int> segTree;

void buildTree(int pos, int l, int r){
    if(l==r){
        segTree[pos]=vec[l];
        return;
    }
    int mid=(l+r)/2;
    buildTree(2*pos, l, mid);
    buildTree(2*pos+1, mid+1, r);
    segTree[pos]=min(segTree[2*pos], segTree[2*pos+1]);
}

void updateTree(int k, int u, int l, int r, int pos){
    if(l==r && k==l){
        segTree[pos]=u;
        return;
    }
    if(k <= r && k>= l){
        int mid=(l+r)/2;
        updateTree(k, u, l, mid, 2*pos);
        updateTree(k, u, mid+1, r, 2*pos+1);
        segTree[pos]=segTree[2*pos+1]+segTree[2*pos];
    }
}

int minQuery(int a, int b, int l, int r, int pos){
    if(a>r || b<l){
        return INT32_MAX;
    }
    if(a<=l && b>=r){
        return segTree[pos];
    }
    int mid=(l+r)/2;
    return min(minQuery(a, b, l, mid, 2*pos), minQuery(a, b, mid+1, r, 2*pos+1));
}



int32_t main() {
    ios::sync_with_stdio(false);
    cin.tie(NULL);
    int n, q;
    cin>>n>>q;
    vec.resize(n+1);
    segTree.resize(4*n+1);
    for(int i=1; i<=n; i++){
        cin>>vec[i];
    }
    buildTree(1, 1, n);

    for(int i=0; i<q; i++){
        int a, b;
        cin>>a>>b;
        cout<<minQuery(a, b, 1, n, 1)<<endl;
    }
    
 
    return 0;
}
